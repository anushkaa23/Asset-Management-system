@page "/assets"
@inject IAssetService AssetService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Assets</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Asset Management</h1>
    <button class="btn btn-primary" @onclick="NavigateToAdd">
        <span class="oi oi-plus"></span> Add Asset
    </button>
</div>

@if (assets == null)
{
    <div class="text-center my-5">
        <div class="spinner-border" role="status"></div>
    </div>
}
else if (!assets.Any())
{
    <div class="alert alert-info">
        <i class="oi oi-info"></i> No assets found. Click "Add Asset" to create your first asset record.
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <input type="text" class="form-control" placeholder="Search by name, type, or serial..." 
                           @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterAssets" />
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="statusFilter" @bind:after="FilterAssets">
                        <option value="">All Statuses</option>
                        <option value="0">Available</option>
                        <option value="1">Assigned</option>
                        <option value="2">Under Repair</option>
                        <option value="3">Retired</option>
                    </select>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Asset Name</th>
                            <th>Type</th>
                            <th>Serial Number</th>
                            <th>Condition</th>
                            <th>Status</th>
                            <th>Spare</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var asset in filteredAssets)
                        {
                            <tr>
                                <td>@asset.AssetId</td>
                                <td>@asset.AssetName</td>
                                <td>@asset.AssetType</td>
                                <td>@asset.SerialNumber</td>
                                <td>
                                    <span class="badge bg-@GetConditionBadgeClass(asset.Condition)">
                                        @asset.Condition
                                    </span>
                                </td>
                                <td>
                                    <span class="badge bg-@GetStatusBadgeClass(asset.Status)">
                                        @asset.Status
                                    </span>
                                </td>
                                <td>
                                    @if (asset.IsSpare)
                                    {
                                        <span class="badge bg-info">Yes</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">No</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => NavigateToEdit(asset.AssetId)">
                                        <span class="oi oi-pencil"></span>
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteAsset(asset.AssetId)">
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="mt-3">
                <p class="text-muted">Total: @filteredAssets.Count() asset(s)</p>
            </div>
        </div>
    </div>
}

@code {
    private List<AssetDTO> assets;
    private List<AssetDTO> filteredAssets = new();
    private string searchTerm = "";
    private string statusFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAssets();
    }

    private async Task LoadAssets()
    {
        var result = await AssetService.GetAllAssetsAsync();
        assets = result.ToList();
        filteredAssets = assets;
    }

    private void FilterAssets()
    {
        filteredAssets = assets;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredAssets = filteredAssets.Where(a =>
                a.AssetName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.AssetType.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(a.SerialNumber) && a.SerialNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }

        if (!string.IsNullOrWhiteSpace(statusFilter))
        {
            if (int.TryParse(statusFilter, out var statusInt))
            {
                var status = (AssetStatus)statusInt;
                filteredAssets = filteredAssets.Where(a => a.Status == status).ToList();
            }
        }
    }

    private string GetConditionBadgeClass(AssetCondition condition) => condition switch
    {
        AssetCondition.New => "success",
        AssetCondition.Good => "primary",
        AssetCondition.NeedsRepair => "warning",
        AssetCondition.Damaged => "danger",
        _ => "secondary"
    };

    private string GetStatusBadgeClass(AssetStatus status) => status switch
    {
        AssetStatus.Available => "success",
        AssetStatus.Assigned => "warning",
        AssetStatus.UnderRepair => "danger",
        AssetStatus.Retired => "secondary",
        _ => "secondary"
    };

    private void NavigateToAdd() => NavigationManager.NavigateTo("/assets/add");

    private void NavigateToEdit(int id) => NavigationManager.NavigateTo($"/assets/edit/{id}");

    private async Task DeleteAsset(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this asset?");

        if (confirmed)
        {
            try
            {
                await AssetService.DeleteAssetAsync(id);
                await LoadAssets();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            }
        }
    }
}
