@page "/employees"
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Employees</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Employee Management</h1>
    <button class="btn btn-primary" @onclick="NavigateToAdd">
        <span class="oi oi-plus"></span> Add Employee
    </button>
</div>

@if (employees == null)
{
    <div class="text-center my-5">
        <div class="spinner-border" role="status"></div>
    </div>
}
else if (!employees.Any())
{
    <div class="alert alert-info">
        <i class="oi oi-info"></i>
        No employees found. Click "Add Employee" to create your first employee record.
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="mb-3">
                <input type="text"
                       class="form-control"
                       placeholder="Search by name, email, or department..."
                       @bind="searchTerm"
                       @bind:event="oninput"
                       @onkeyup="FilterEmployees" />
            </div>

            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Full Name</th>
                            <th>Department</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Designation</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var employee in filteredEmployees)
                        {
                            <tr>
                                <td>@employee.EmployeeId</td>
                                <td>@employee.FullName</td>
                                <td>@employee.Department</td>
                                <td>@employee.Email</td>
                                <td>@employee.PhoneNumber</td>
                                <td>@employee.Designation</td>
                                <td>
                                    @if (employee.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-warning me-1"
                                            @onclick="() => NavigateToEdit(employee.EmployeeId)">
                                        <span class="oi oi-pencil"></span>
                                    </button>
                                    <button class="btn btn-sm btn-danger"
                                            @onclick="() => DeleteEmployee(employee.EmployeeId)">
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="mt-3">
                <p class="text-muted">
                    Total: @filteredEmployees.Count() employee(s)
                </p>
            </div>
        </div>
    </div>
}

@code {
    private List<EmployeeDTO> employees;
    private List<EmployeeDTO> filteredEmployees = new();
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        var result = await EmployeeService.GetAllEmployeesAsync();
        employees = result.ToList();
        filteredEmployees = employees;
    }

    private void FilterEmployees()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredEmployees = employees;
        }
        else
        {
            filteredEmployees = employees
                .Where(e =>
                    e.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    e.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    e.Department.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void NavigateToAdd()
    {
        NavigationManager.NavigateTo("/employees/add");
    }

    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/employees/edit/{id}");
    }

    private async Task DeleteEmployee(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this employee?");

        if (confirmed)
        {
            try
            {
                await EmployeeService.DeleteEmployeeAsync(id);
                await LoadEmployees();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting employee: {ex.Message}");
            }
        }
    }
}
