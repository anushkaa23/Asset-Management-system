@page "/login"
@layout PublicLayout
@using System.ComponentModel.DataAnnotations
@using AssetManagement.Business.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage SessionStorage

<PageTitle>Login - Asset Management</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="text-center mb-4">
            <h2>Asset Management System</h2>
            <p class="text-muted">Please login to continue</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                Login
            </button>

            <div class="text-center mb-3">
                <small class="text-muted">
                    Don't have an account?
                    <a href="/register" class="text-decoration-none fw-bold">Register here</a>
                </small>
            </div>

            <hr>

            <div class="text-center">
                <small class="text-muted">
                    <strong>Default Admin:</strong> admin / Admin@123
                </small>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .login-card {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
    }

    hr {
        margin: 1.5rem 0;
        opacity: 0.1;
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = "";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await SessionStorage.GetAsync<string>("username");

            if (result.Success && !string.IsNullOrEmpty(result.Value))
            {
                // Already logged in, redirect to dashboard
                NavigationManager.NavigateTo("/", forceLoad: true);
                return;
            }
        }
        catch
        {
            // User not logged in, stay on login page
        }
    }

    private async Task HandleLogin()
    {
        if (isLoading)
            return;

        isLoading = true;
        errorMessage = "";

        try
        {
            var user = await AuthService.ValidateUserAsync(loginModel.Username, loginModel.Password);

            if (user != null)
            {
                await SessionStorage.SetAsync("username", user.Username);
                await SessionStorage.SetAsync("userId", user.UserId);
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid username or password. Please try again or register a new account.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";
    }
}
