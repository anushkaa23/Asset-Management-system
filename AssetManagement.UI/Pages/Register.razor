@page "/register"
@layout PublicLayout
@using System.ComponentModel.DataAnnotations
@using AssetManagement.Business.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Register - Asset Management</PageTitle>

<div class="register-container">
    <div class="register-card">
        <div class="text-center mb-4">
            <h2>Create New Account</h2>
            <p class="text-muted">Register to access the system</p>
        </div>

        @if (isRegistrationSuccess)
        {
            <div class="alert alert-success" role="alert">
                <h5 class="alert-heading">✓ Registration Successful!</h5>
                <p>Your account has been created. You will be redirected to login shortly...</p>
                <hr />
                <button class="btn btn-success" @onclick="GoToLogin">Go to Login Now</button>
            </div>
        }
        else
        {
            <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
                <DataAnnotationsValidator />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">@errorMessage</div>
                }

                <div class="mb-3">
                    <label for="username" class="form-label">Username *</label>
                    <InputText id="username" class="form-control" @bind-Value="registerModel.Username"
                               placeholder="Choose a username" />
                    <ValidationMessage For="@(() => registerModel.Username)" />
                    <small class="text-muted">3–50 characters, no spaces</small>
                </div>

                <div class="mb-3">
                    <label for="fullname" class="form-label">Full Name</label>
                    <InputText id="fullname" class="form-control" @bind-Value="registerModel.FullName"
                               placeholder="Your full name (optional)" />
                    <ValidationMessage For="@(() => registerModel.FullName)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password *</label>
                    <InputText type="password" id="password" class="form-control"
                               @bind-Value="registerModel.Password" placeholder="At least 8 characters" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                    <small class="text-muted">Minimum 8 characters</small>
                </div>

                <div class="mb-3">
                    <label for="confirmpassword" class="form-label">Confirm Password *</label>
                    <InputText type="password" id="confirmpassword" class="form-control"
                               @bind-Value="registerModel.ConfirmPassword" placeholder="Re-enter password" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                </div>

                <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    Create Account
                </button>

                <div class="text-center">
                    <small class="text-muted">
                        Already have an account? <a href="/login" class="text-decoration-none">Login here</a>
                    </small>
                </div>
            </EditForm>
        }
    </div>
</div>

<style>
    .register-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }
    .register-card {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 450px;
    }
    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }
    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
    }
</style>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = "";
    private bool isLoading = false;
    private bool isRegistrationSuccess = false;

    private async Task HandleRegister()
    {
        if (isLoading) return;
        isLoading = true;
        errorMessage = "";

        try
        {
            if (registerModel.Password != registerModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match";
                return;
            }

            bool usernameExists = await AuthService.UsernameExistsAsync(registerModel.Username);
            if (usernameExists)
            {
                errorMessage = $"Username '{registerModel.Username}' is already taken.";
                return;
            }

            string fullName = string.IsNullOrWhiteSpace(registerModel.FullName)
                ? registerModel.Username
                : registerModel.FullName;

            var newUser = await AuthService.RegisterUserAsync(
                registerModel.Username, registerModel.Password, fullName);

            if (newUser != null)
            {
                isRegistrationSuccess = true;
                await JSRuntime.InvokeVoidAsync("console.log", $"User registered successfully: {newUser.Username}");

                // Wait 3 seconds and redirect to login page automatically
                await Task.Delay(3000);
                GoToLogin();
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            await JSRuntime.InvokeVoidAsync("console.error", $"Registration error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        [RegularExpression(@"^[a-zA-Z0-9_]+$", ErrorMessage = "Username can only contain letters, numbers, and underscores")]
        public string Username { get; set; } = "";

        [StringLength(100, ErrorMessage = "Full name cannot exceed 100 characters")]
        public string FullName { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }
}
