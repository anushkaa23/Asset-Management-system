@page "/reports"
@inject IDashboardService DashboardService
@inject IJSRuntime JSRuntime

<PageTitle>Reports</PageTitle>

<h1>Reports & Analytics</h1>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs">
                    <li class="nav-item">
                        <a class="nav-link @(activeTab == "warranty" ? "active" : "")"
                           @onclick='() => activeTab = "warranty"'>
                            Warranty Expiry
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link @(activeTab == "history" ? "active" : "")"
                           @onclick='() => activeTab = "history"'>
                            Assignment History
                        </a>
                    </li>
                </ul>
            </div>
            <div class="card-body">

                @if (activeTab == "warranty")
                {
                    <h5 class="card-title">Assets Nearing Warranty Expiry (Next 30 Days)</h5>

                    @if (warrantyReport == null)
                    {
                        <div class="text-center my-3">
                            <div class="spinner-border spinner-border-sm" role="status"></div>
                        </div>
                    }
                    else if (!warrantyReport.Any())
                    {
                        <div class="alert alert-success">
                            <i class="oi oi-check"></i> No assets have warranties expiring in the next 30 days.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Asset ID</th>
                                        <th>Asset Name</th>
                                        <th>Type</th>
                                        <th>Serial Number</th>
                                        <th>Warranty Expiry</th>
                                        <th>Days Remaining</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in warrantyReport)
                                    {
                                        <tr>
                                            <td>@item.AssetId</td>
                                            <td>@item.AssetName</td>
                                            <td>@item.AssetType</td>
                                            <td>@item.SerialNumber</td>
                                            <td>@((DateTime)item.WarrantyExpiryDate).ToString("yyyy-MM-dd")</td>
                                            <td>
                                                <span class="badge bg-@GetWarrantyBadgeClass((int)item.DaysRemaining)">
                                                    @item.DaysRemaining days
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <button class="btn btn-success mt-3" @onclick="ExportWarrantyReport">
                            <span class="oi oi-data-transfer-download"></span> Export to CSV
                        </button>
                    }
                }
                else if (activeTab == "history")
                {
                    <h5 class="card-title">Complete Assignment History</h5>

                    @if (historyReport == null)
                    {
                        <div class="text-center my-3">
                            <div class="spinner-border spinner-border-sm" role="status"></div>
                        </div>
                    }
                    else if (!historyReport.Any())
                    {
                        <div class="alert alert-info">
                            <i class="oi oi-info"></i> No assignment history available. Create assignments to see history.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-sm">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Asset Name</th>
                                        <th>Type</th>
                                        <th>Serial Number</th>
                                        <th>Employee</th>
                                        <th>Department</th>
                                        <th>Assigned Date</th>
                                        <th>Returned Date</th>
                                        <th>Status</th>
                                        <th>Notes</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in historyReport)
                                    {
                                        <tr>
                                            <td>@item.AssignmentId</td>
                                            <td>@item.AssetName</td>
                                            <td>@item.AssetType</td>
                                            <td>@item.SerialNumber</td>
                                            <td>@item.EmployeeName</td>
                                            <td>@item.Department</td>
                                            <td>@((DateTime)item.AssignedDate).ToString("yyyy-MM-dd")</td>
                                            <td>
                                                @if (item.ReturnedDate != null)
                                                {
                                                    @(item.ReturnedDate is DateTime dt ? dt.ToString("yyyy-MM-dd") : "")
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if ((bool)item.IsActive)
                                                {
                                                    <span class="badge bg-success">Active</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Returned</span>
                                                }
                                            </td>
                                            <td>@(item.Notes ?? "-")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <button class="btn btn-success mt-3" @onclick="ExportHistoryReport">
                            <span class="oi oi-data-transfer-download"></span> Export to CSV
                        </button>
                    }
                }

            </div>
        </div>
    </div>
</div>

@code {
    private string activeTab = "warranty";
    private IEnumerable<dynamic> warrantyReport;
    private IEnumerable<dynamic> historyReport;

    protected override async Task OnInitializedAsync()
    {
        await LoadReports();
    }

    private async Task LoadReports()
    {
        warrantyReport = await DashboardService.GetWarrantyExpiryReportAsync(30);
        historyReport = await DashboardService.GetAssignmentHistoryReportAsync();
    }

    private string GetWarrantyBadgeClass(int daysRemaining)
    {
        if (daysRemaining <= 7)
            return "danger";
        else if (daysRemaining <= 15)
            return "warning";
        else
            return "info";
    }

    private async Task ExportWarrantyReport()
    {
        try
        {
            var csv = "Asset ID,Asset Name,Type,Serial Number,Warranty Expiry,Days Remaining\n";
            foreach (var item in warrantyReport)
            {
                csv += $"{item.AssetId},{item.AssetName},{item.AssetType},{item.SerialNumber},{((DateTime)item.WarrantyExpiryDate):yyyy-MM-dd},{item.DaysRemaining}\n";
            }
            await JSRuntime.InvokeVoidAsync("downloadFile", "warranty_report.csv", csv);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting: {ex.Message}");
        }
    }

    private async Task ExportHistoryReport()
    {
        try
        {
            var csv = "Assignment ID,Asset Name,Type,Serial Number,Employee,Department,Assigned Date,Returned Date,Status,Notes\n";
            foreach (var item in historyReport)
            {
                var returnedDate = item.ReturnedDate != null ? ((DateTime)item.ReturnedDate).ToString("yyyy-MM-dd") : "-";
                var status = (bool)item.IsActive ? "Active" : "Returned";
                var notes = item.Notes ?? "-";
                csv += $"{item.AssignmentId},{item.AssetName},{item.AssetType},{item.SerialNumber},{item.EmployeeName},{item.Department},{((DateTime)item.AssignedDate):yyyy-MM-dd},{returnedDate},{status},{notes}\n";
            }
            await JSRuntime.InvokeVoidAsync("downloadFile", "assignment_history.csv", csv);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting: {ex.Message}");
        }
    }
}
