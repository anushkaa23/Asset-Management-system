@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage SessionStorage
@inject IJSRuntime JSRuntime

@if (isLoginPage)
{
    @Body
}
else
{
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <span class="user-info">
                    Welcome, @username
                </span>
                <button class="btn btn-sm btn-outline-danger" @onclick="Logout">
                    Logout
                </button>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
}

@code {
    private string username = "User";
    private bool isLoginPage = false;

    protected override async Task OnInitializedAsync()
    {
        // FIX: Check if current page is login
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        isLoginPage = uri.AbsolutePath.ToLower() == "/login";

        if (!isLoginPage)
        {
            try
            {
                var result = await SessionStorage.GetAsync<string>("username");
                
                if (!result.Success || string.IsNullOrEmpty(result.Value))
                {
                    NavigationManager.NavigateTo("/login", forceLoad: true);
                    return;
                }

                username = result.Value;
            }
            catch
            {
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }
        }
    }

    // FIX: Added to update layout when navigating
    protected override void OnParametersSet()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        isLoginPage = uri.AbsolutePath.ToLower() == "/login";
        StateHasChanged();
    }

    private async Task Logout()
    {
        try
        {
            await SessionStorage.DeleteAsync("username");
            await SessionStorage.DeleteAsync("userId");
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error logging out: {ex.Message}");
        }
    }
}